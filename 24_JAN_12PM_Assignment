Submitted By: SHIVAM RAI

1. Can you provide an example of a custom exception class in C++?
Ans: 
#include <iostream>
using namespace std;
 
class demo1 {
};
 
class demo2 {
};
 
int main()
{
    for (int i = 1; i <= 2; i++) {
        try {
            if (i == 1)
                throw demo1();
 
            else if (i == 2)
                throw demo2();
        }
 
        catch (demo1 d1) {
            cout << "Caught exception of demo1 class \n";
        }
 
        catch (demo2 d2) {
            cout << "Caught exception of demo2 class \n";
        }
    }
}


*************************************************************************************************************************

2. What happens if an exception is not caught in a C++ program?
Ans:
If an exception is thrown and not caught anywhere, the program terminates abnormally.
 #include <iostream>
using namespace std;
 
int main()
{
    try  {
       throw 'a';
    }
    catch (int x)  {
        cout << "Caught ";
    }
    return 0;
}


****************************************************************************************************************************

3. What is the difference between a try-catch block and a try-throw-catch block?
Ans:
The try block contains a set of statements where an exception can occur.
The catch block is used to handle the uncertain condition of a try block. A try block is always followed by a catch block, 
which handles the exception that occurs in the associated try block.
The throw keyword is used to transfer control from the try block to the catch block. 


*****************************************************************************************************************************

4.How do you re-throw an exception in C++? WITH EXAMPLE
Ans:
Rethrowing an expression from within an exception handler can be done by calling throw, by itself, with no exception. 
This causes current exception to be passed on to an outer try/catch sequence. An exception can only be rethrown from within 
a catch block. When an exception is rethrown, it is propagated outward to the next catch block.

Example:
#include <iostream>
using namespace std;
void MyHandler()
{
   try
   {
       throw “hello”;
   }
   catch (const char*)
   {
   cout <<”Caught exception inside MyHandler\n”;
   throw; //rethrow char* out of function
   }
}
int main()
{
   cout<< “Main start”;
   try
   {
       MyHandler();
   }
   catch(const char*)
   {
      cout <<”Caught exception inside Main\n”;
   }
       cout << “Main end”;
       return 0;
}

Output:
Main start
Caught exception inside MyHandler
Caught exception inside Main
Main end


**************************************************************************************************************************************************

5. OUTPUT OF THE FOLLOWING PROGRAM.
  #include <iostream>  
#include <exception>  
using namespace std;  
class MyException : public exception{  
    public:  
        const char * what() const throw()  
        {  
            return "Attempted to divide by zero!\n";  
        }  
};  
int main()  
{  
    try  
    {  
        int x, y;  
        cout << "Enter the two numbers : \n";  
        cin >> x >> y;  
        if (y == 0)  
        {  
            MyException z;  
            throw z;  
        }  
        else  
        {  
            cout << "x / y = " << x/y << endl;  
        }  
    }  
    catch(exception& e)  
    {  
        cout << e.what();  
    }  
}  


Output:
Enter the two numbers :
8
0
Attempted to divide by zero!
